@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation

@using System.ComponentModel.DataAnnotations
@using Models

<h3>Register</h3>

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <div>
        <label>Email:</label>
        <InputText @bind-Value="registerModel.Email" class="form-control" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div>
        <label>Password:</label>
        <InputText @bind-Value="registerModel.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div>
        <label>Confirm Password:</label>
        <InputText @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
    </div>
    <div>
        <label>Company:</label>
        <InputText @bind-Value="registerModel.CompanyName" class="form-control" type="text" />
        <ValidationMessage For="@(() => registerModel.CompanyName)" />
    </div>

    <div>
        <label>User Type:</label>
        <InputSelect @bind-Value="registerModel.UserType" class="form-control">
            @foreach (var type in Enum.GetValues<UserType>())
            {
                <option value="@type">@type</option>
            }
        </InputSelect>


        <ValidationMessage For="@(() => registerModel.UserType)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;

    private class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;

        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required]
        public UserType UserType { get; set; } = UserType.Shipper;

        [Required]
        public string CompanyName { get; set; } = string.Empty;  // Changed from Company
    }

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string[]>>();
                errorMessage = error?.FirstOrDefault().Value?.FirstOrDefault()
                    ?? "Registration failed. Please check your input.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error connecting to server.";
            Console.WriteLine(ex);
        }
    }
}
