@page "/register-truck"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations

<CascadingAuthenticationState>
    <AuthorizeView Roles="Trucker,Company" Context="authContext">
        <Authorized>
            <h3 class="mb-4">Register Truck</h3>

            <EditForm Model="truckModel" OnValidSubmit="HandleRegisterTruck">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label>Truck Type:</label>
                        <InputSelect @bind-Value="truckModel.TruckTypeId" class="form-control">
                            @if (truckTypes.Count == 0)
                            {
                                <option value="">Truck type not yet available</option>
                            }
                            else
                            {
                                @foreach (var type in truckTypes)
                                {
                                    <option value="@type.Id">@type.Name</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => truckModel.TruckTypeId)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Number Plate:</label>
                        <InputText @bind-Value="truckModel.NumberPlate" class="form-control" />
                        <ValidationMessage For="@(() => truckModel.NumberPlate)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Load Capacity Weight (kg):</label>
                        <InputNumber @bind-Value="truckModel.LoadCapacityWeight" class="form-control" />
                        <ValidationMessage For="@(() => truckModel.LoadCapacityWeight)" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label>Load Capacity Volume (m³):</label>
                        <InputNumber @bind-Value="truckModel.LoadCapacityVolume" class="form-control" />
                        <ValidationMessage For="@(() => truckModel.LoadCapacityVolume)" />
                    </div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary" disabled="@(truckTypes.Count == 0)">Register Truck</button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="ResetForm">Reset</button>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success mt-3">@successMessage</div>
            }
        </Authorized>

        <NotAuthorized>
            <h3>Access Denied</h3>
            <p>You do not have permission to access this page.</p>
        </NotAuthorized>
    </AuthorizeView>

</CascadingAuthenticationState>

@code {
    private TruckModel truckModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private List<TruckTypeModel> truckTypes = new();

    private class TruckModel
    {
        [Required(ErrorMessage = "Truck Type is required")]
        public int TruckTypeId { get; set; }

        [Required(ErrorMessage = "Number Plate is required")]
        [MaxLength(50, ErrorMessage = "Number Plate cannot exceed 50 characters")]
        public string NumberPlate { get; set; } = string.Empty;

        [Required(ErrorMessage = "Load Capacity Weight is required")]
        [Range(0, double.MaxValue, ErrorMessage = "Load Capacity Weight must be positive")]
        public decimal LoadCapacityWeight { get; set; }

        [Required(ErrorMessage = "Load Capacity Volume is required")]
        [Range(0, double.MaxValue, ErrorMessage = "Load Capacity Volume must be positive")]
        public decimal LoadCapacityVolume { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Height must be positive")]
        public decimal? Height { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Width must be positive")]
        public decimal? Width { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Length must be positive")]
        public decimal? Length { get; set; }

        public string? DriverName { get; set; }
        public string? DriverContactInformation { get; set; }
        public string? InsuranceInformation { get; set; }

        [Required(ErrorMessage = "Availability Start Date is required")]
        public DateTime AvailabilityStartDate { get; set; } = DateTime.Today;

        [Required(ErrorMessage = "Availability End Date is required")]
        public DateTime AvailabilityEndDate { get; set; } = DateTime.Today.AddDays(30);

        public string? PreferredRoute { get; set; }
    }

    private class TruckTypeModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Redirect if user is not authenticated or not a Trucker/Company
        if (!user.Identity.IsAuthenticated || (!user.IsInRole("Trucker") && !user.IsInRole("Company")))
        {
            Navigation.NavigateTo("/", true);
        }

        await LoadTruckTypes();
    }

    private async Task LoadTruckTypes()
    {
        try
        {
            truckTypes = await Http.GetFromJsonAsync<List<TruckTypeModel>>("api/trucktypes") ?? new List<TruckTypeModel>();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to load truck types: " + ex.Message);
            errorMessage = "Failed to load truck types. Please try again.";
        }
    }

    private async Task HandleRegisterTruck()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("api/truck/register", truckModel);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Truck registration successful.";
                ResetForm();
            }
            else
            {
                errorMessage = "Truck registration failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error connecting to server.";
        }
    }

    private void ResetForm()
    {
        truckModel = new TruckModel();
    }
}